// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model.prisma

// Definición del modelo Category
model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  subcategory SubCategory[] // Relación uno a muchos con SubCategory
  products    Product[]
  materials   Material[]
}

// Definición del modelo SubCategory
model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]

  // La relación con la categoría, usando categoryId como clave foránea
}

model Product {
  id                   String      @id @default(uuid())
  name                 String
  materialId           String?
  description          String
  categoryId           String // Cambiado de Int a String
  subcategoryId        String // Cambiado de Int a String
  codeReference        String
  codeReferenceFactory String
  createdAt            DateTime    @default(now()) // Agrega esta línea para la fecha de creación
  variants             Variant[]
  category             Category    @relation(fields: [categoryId], references: [id])
  subcategory          SubCategory @relation(fields: [subcategoryId], references: [id])
  material             Material?   @relation(fields: [materialId], references: [id])
  // Relación con Compras

  purchases    Purchase[]
  // Relación con el Carrito de Compras
  shoppingCart ShoppingCart[]
  // Relación con la Lista de Deseos
  wishlists    User[]         @relation(name: "UserWishlist")
}

model Variant {
  id                String   @id @default(uuid())
  color             String
  size              String
  sku               String   @unique
  price             Float
  QuantityAvailable Int      @default(0)
  imgs              String[]
  productId         String
  // Otros campos relacionados con la variante si es necesario
  createdAt         DateTime @default(now()) // Agrega esta línea para la fecha de creación

  // Relaciones
  product Product @relation(fields: [productId], references: [id])
}

model Material {
  id         String    @id @default(uuid())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]
}

model SkuCounter {
  id       String @id @default(uuid())
  counter  Int    @default(1)
  category String
  // Puedes agregar más campos según tus necesidades
}

// Modelo para Usuario
model User {
  id            String         @id @default(cuid())
  username      String?        @unique
  email         String         @unique
  password      String         @default("AsDjKlñ654258")
  name          String?
  address       String?
  phoneNumber   String?
  role          String         @default("User")
  createAt      DateTime       @default(now())
  purchases     Purchase[]
  carts         ShoppingCart[] // Relación con el carrito de compras
  wishlist      Product[]      @relation(name: "UserWishlist") // Relación con la lista de deseos
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// Modelo para Compras
model Purchase {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  totalAmount Float
  // Otros campos relacionados con la compra, como el estado, método de pago, etc.
  // ...

  // Relación con Productos (asumo que un usuario puede comprar varios productos en una compra)
  products Product[]
}

// Modelo para el Carrito de Compras
// Modelo para el Carrito de Compras
model ShoppingCart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  // ...

  // Relación con Productos en el carrito
  products Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
